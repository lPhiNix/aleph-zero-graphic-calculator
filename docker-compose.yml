services:
  backend:
    build: .
    container_name: backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/mysqldb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      FRONTEND_URL: http://localhost:80
    depends_on:
      - db  # Wait for DB container to start (no healthcheck)
    ports:
      - "8080:8080"  # Expose backend on host port 8080
    networks:
      - internal  # Backend connects only to internal network (not exposed externally)
    restart: unless-stopped  # Restart policy to keep container running unless stopped manually
    logging:
      driver: json-file  # Limit log file size and rotation to avoid disk bloat
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Build react+vite frontend using the specified URL for backend and frontend
        VITE_BACKEND_URL: http://localhost:8080
        VITE_FRONTEND_URL: http://localhost:80
    container_name: frontend
    ports:
      - "80:80" #for PROD (Http only)
    depends_on:
      - backend  # Wait for backend container to start
    networks:
      - internal  # Agregado para que frontend pueda llamar al backend por nombre de servicio
      - frontend_net  # Also connected to frontend_net to expose frontend externally
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: mysql:latest
    container_name: mysql
    environment:
      # Credentials and DB name for MySQL (development generic values)
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mysqldb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql  # Persist DB data across container restarts
    networks:
      - internal  # DB only accessible inside internal network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  db_data:  # Volume for persistent MySQL data

networks:
  internal:
    driver: bridge  # Internal network for backend and db communication only
  frontend_net:
    driver: bridge  # Network to expose frontend externally
